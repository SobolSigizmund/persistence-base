{"name":"Persistence-base","tagline":"A base persistence project with Maven, Eclipse-Link, Apache B-Val, Guice, Guice-Persist and MySQL.","body":"persistence\r\n================\r\n\r\n### Why did I built this?\r\n\r\nIn my post-graduation classes, I had to build a lot of simple projects\r\nwith only persistence in one grade. So, I built this because I'm lazy.\r\n\r\n### Tecnology\r\n\r\nThis project is built on top of the following tecnologies:\r\n\r\n* EclipseLink and JPA2\r\n\r\n  EclipseLink is the reference implementation of JPA2 (JSR-317)\r\n  specification. I also found it a bit faster and \"ligher\" than\r\n  other ORMs, like Hibernate.\r\n\r\n* Apache B-Val\r\n\r\n  Implementation (not sure if is the reference one) of the JSR-303, which\r\n  _a meta-data model and API for JavaBeanTM validation based on defines\r\n  annotations, with overrides and extended meta-data through the use of\r\n  XML validation descriptors.\"_\r\n\r\n* Google Guice\r\n\r\n  Reference Implementation of the JSR-330, which helps _\"to maximize reusability,\r\n  testability and maintainability of Java code by standardizing an extensible\r\n  dependency injection API\"_.\r\n\r\n* Google Guava APIs\r\n\r\n  A set of utility classes to made you write less code. You might want to take\r\n  a loot at [this][guava].\r\n\r\n* JUnit\r\n\r\n  For tests pourposes.\r\n\r\n* Apache Maven\r\n\r\n  You know that it is.\r\n\r\n\r\n### What we provide\r\n\r\nWe provide a set of useful classes which you can use to bootstrap your\r\npersistence project:\r\n\r\n* A `MappedSuperclass` with `@Id` and `@Version` (see the `Bean` class);\r\n* A `GenericDao` that provide basic CRUD operations out of the box;\r\n* An `AbstractPersistentModule` to you extend and do things like:\r\n\r\n```java\r\n// module setup\r\nbindGenericDaoFor(MyBean.class);\r\n```\r\n\r\nAnd guice will automagically provide a `GenericDao<MyBean>` to you, so you can\r\ninject like this:\r\n\r\n```java\r\n// some class\r\n@Inject Dao<MyBean> myBeanDao;\r\n```\r\n\r\nYou can also do something like\r\n\r\n```java\r\nbind(MyOtherDao.class).to(MyOtherBeanDaoImpl.class);\r\n```\r\n\r\nin your module, and then, somewhere, just _inject_ it:\r\n\r\n```java\r\n@Inject MyOtherDao myOtherDao;\r\n```\r\n\r\nAnd then use it like a boss.\r\n\r\n\r\nThe `AbstractPersistentModule` will also startup the PersistenceService\r\n(Guice-Persist setup).\r\n\r\n### How-to use\r\n\r\n> comming soon (?)\r\n\r\nI recommend you to read the sources of the tests. It's a complete basic example,\r\nyou should use it as a \"light\" for you.\r\n\r\n\r\n### Recommended use\r\n\r\nYou can use this project as a base for you school project, or any other app.\r\nI'll recommend you to read the sources, and, change anything to adapts to what\r\nyou may need.\r\n\r\nFor school projects, it should be good enought in it's actual state. Just clone,\r\nrename and put the horses to work on what really matter.\r\n\r\n-------------\r\n\r\nYou might want to take a look at [this old tutorial of an old revision][1] of\r\nthis project (you may want to use it at [0.0.1][2] tag).\r\n\r\n[1]: http://caarlos0.github.com/posts/modular-persistence/\r\n[2]: https://github.com/caarlos0/persistence-base/tree/v0.0.1\r\n[guava]: http://caarlos0.github.com/posts/rocking-out-with-google-guava/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}